@pytest.fixture(scope="module") — это фикстура с областью действия на один модуль 
(т.е. она будет создана один раз для всех тестов в этом файле). Она позволяет подготовить данные или состояния для тестов. 
В данном случае она создаёт и возвращает объект requests.Session().

session = requests.Session() — создаём объект сессии, который будет использоваться для выполнения HTTP-запросов. 
Это позволяет повторно использовать соединение, что ускоряет выполнение тестов.

session.auth = (USERNAME, PASSWORD) — указываем параметры аутентификации для всех запросов.

session.verify = False — игнорирует проверку SSL-сертификатов (полезно для самоподписанных сертификатов на BMC).

yield session — ключевая часть: yield возвращает сессию в тест, чтобы тест мог её использовать. 
После выполнения тестов, код после yield будет вызван, и сессия будет закрыта.

session.close() — закрываем сессию после завершения всех тестов.
--------------------------
@odata.id — это часть спецификации OData (Open Data Protocol), который используется для организации и обмена данными через REST API.
В контексте OpenBMC и Redfish API, @odata.id часто представляет собой уникальный идентификатор для сущности, такой как сессия или объект в системе.
Когда вы создаёте сессию через Redfish API, сервер должен вернуть токен или ссылку на эту сессию, которая обычно представлена в поле @odata.id. 
Этот идентификатор используется для последующих запросов для ссылки на конкретную сессию.


    session_info = response.json()
    assert "@odata.id" in session_info, "The Session token field is missing in the response"

response.json() — это метод, который преобразует тело ответа в формат JSON и сохраняет его в переменную session_info.
Затем выполняется проверка: если в session_info (полученный JSON-ответ) нет поля @odata.id, 
то тест завершится с ошибкой и выведет сообщение: "The Session token field is missing in the response".
Это гарантирует, что если API не вернёт токен сессии, тест не пройдет, и ты сможешь быстро обнаружить проблему.